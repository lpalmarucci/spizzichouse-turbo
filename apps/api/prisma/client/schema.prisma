generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Player {
  id        String       @id @default(uuid())
  full_name String
  email     String
  bio       String?
  createdAt DateTime     @default(now())
  level     PlayerLevel  @default(BEGINNER)
  status    PlayerStatus @default(ACTIVE)
  matches   Match[]      @relation("MatchToPlayer")
  rounds    Round[]
  scores    Score[]

  @@map("players")
}

model Match {
  id          String      @id @default(uuid())
  title       String
  description String?
  status      MatchStatus
  date        DateTime    @default(now())
  duration    Float?
  rounds      Round[]
  players     Player[]    @relation("MatchToPlayer")
  scores      Score[]

  @@map("matches")
}

model Round {
  id        String      @id @default(uuid())
  status    RoundStatus @default(IN_PROGRESS)
  number    Int
  createdAt DateTime    @default(now())
  matchId   String
  match     Match       @relation(fields: [matchId], references: [id])
  playerId  String
  player    Player      @relation(fields: [playerId], references: [id])
  scores    Score[]

  @@map("rounds")
}

model Score {
  matchId String
  match   Match  @relation(fields: [matchId], references: [id])

  roundId String
  round   Round  @relation(fields: [roundId], references: [id])

  playerId String
  player   Player @relation(fields: [playerId], references: [id])

  points Int

  @@unique([playerId, matchId, roundId])
}

enum RoundStatus {
  IN_PROGRESS
  COMPLETED
}

enum MatchStatus {
  UPCOMING
  IN_PROGRESS
  COMPLETED
}

enum PlayerLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

enum PlayerStatus {
  ACTIVE
  INACTIVE
}
